{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Note</p> <p>This is your project's home page.</p> <p>To-do</p> <p>Update the <code>site_name</code> config in the <code>mkdocs.yml</code> file within the root directory.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Provides the CI setup and local development instructions to optimally use this repository.</p> <p>\ud83d\ude80 Instructions are distilled to get you started with the least amount of effort. Highly recommend reading background information for context in the provided links.</p>"},{"location":"quickstart/#install-developer-tools","title":"Install developer tools","text":"<pre><code>pip install --user pre-commit commitizen mkdocs-material\n</code></pre> <ul> <li>For background on <code>pre-commit</code> please see pre-commit for further details.</li> <li>For background on <code>commitizen</code> please see commitizen for further details.</li> <li>For background on <code>mkdocs-material</code> please see mkdocs-material for further details.</li> </ul>"},{"location":"quickstart/#setup-base-release-for-semantic-release","title":"Setup base release for semantic-release","text":"<p>\u26a0\ufe0f This is a one time activity. If a tag already exists in the repository this step is not required. If no tags exist proceed to read the next section.</p> <p>\u26a0\ufe0f  Why is this required?</p> <p>Please see Base release version documentation for rationale.</p> <pre><code># Within the `main` branch in your git repo\ngit tag -a v0.1.0 -m \"Pre-release\"\ngit push origin v0.1.0\n</code></pre>"},{"location":"quickstart/#documentation-generation-via-mkdocs-material","title":"Documentation generation via mkdocs-material","text":"<ol> <li> <p>Enable <code>gh-pages</code> as per the CI setup instructions.</p> </li> <li> <p>Update <code>site_name</code> field in <code>./mkdocs.yml</code> file.</p> </li> </ol>"},{"location":"quickstart/#get-template-repository-updates-optional","title":"Get template repository updates (optional)","text":"<p>Setup an additional remote to periodically get latest template repository updates.</p> <pre><code>git remote add template https://github.com/rog-golang-buddies/golang-template-repository.git\n# Update\ngit fetch template\ngit merge template/[branch to merge]\n</code></pre>"},{"location":"continuous-integration/gitleaks/","title":"gitleaks","text":""},{"location":"continuous-integration/gitleaks/#what","title":"What","text":"<p>gitleaks is a SAST tool for detecting and preventing hardcoded secrets like passwords, api keys, and tokens in git repos. Gitleaks is an easy-to-use, all-in-one solution for detecting secrets, past or present, in your code.</p>"},{"location":"continuous-integration/gitleaks/#why","title":"Why","text":"<p>Raise security incidents early by detecting secret leaks and raising Github security code scanning alerts.</p>"},{"location":"continuous-integration/gitleaks/#how","title":"How","text":"<p>The mechanism to detect secrets and protect (undo commit with a secret) is described here.</p>"},{"location":"continuous-integration/gitleaks/#ci-setup","title":"CI setup","text":"<p>Summary</p> <p>No configuration required.</p> <p>A <code>gitleaks detect</code> command is run via a gitleaks Github workflow in <code>.github/workflows/gitleaks.yml</code>.</p> <p>Info</p> <p>The gitleaks Github action has a paid license restriction, therefore a custom workflow has been setup instead. It will fail the secret scan if secrets are detected and push alerts to Github security.</p>"},{"location":"continuous-integration/gitleaks/#local-setup","title":"Local setup","text":"<p>Done</p> <p>This is already configured for you via pre-commit.</p>"},{"location":"continuous-integration/golangci-lint/","title":"golangci-lint","text":""},{"location":"continuous-integration/golangci-lint/#what","title":"What","text":"<p>golangci-lint is a Go linters aggregator. It runs linters in parallel, uses caching, supports yaml config, has integrations with all major IDE and has dozens of linters included.</p>"},{"location":"continuous-integration/golangci-lint/#why","title":"Why","text":"<p>Provides Secure Application Security Testing, error, style etc. checks for your codebase.</p> <p>Tip</p> <p>See supported linters here.</p>"},{"location":"continuous-integration/golangci-lint/#how","title":"How","text":"<p>Linters can be configured via command-line options or  a configuration file.</p>"},{"location":"continuous-integration/golangci-lint/#ci-setup","title":"CI setup","text":"<p>Summary</p> <p>No configuration required.</p> <p><code>golangci-lint</code> will be executed via the pre-commit Github workflow in <code>.github/workflows/pre-commit.yml</code>.</p>"},{"location":"continuous-integration/golangci-lint/#local-setup","title":"Local setup","text":"<p>Done</p> <p>This is already configured for you via pre-commit.</p> <p>For custom configurations to modify how <code>golangci-lint</code> runs see the configuration guide.</p> <p>You may want to disable linters that might be too strict (e.g: exhaustivestruct) or add some rules around how it should behave. This can be done via linter configuration.</p>"},{"location":"continuous-integration/mkdocs-material/","title":"mkdocs-material","text":""},{"location":"continuous-integration/mkdocs-material/#what","title":"What","text":"<p>mkdocs-material provides documentation in Markdown to create a professional static site in minutes \u2013 searchable, customizable, for all devices.</p>"},{"location":"continuous-integration/mkdocs-material/#why","title":"Why","text":"<p>From a developer experience perspective, it is easier to clone and have everything you need to reference locally rather than having to externally reference something i.e Github wiki, Confluence etc.</p> <p>This minimises context switching and aids the practice of keeping documentation updated as it is closer to the codebase.</p>"},{"location":"continuous-integration/mkdocs-material/#how","title":"How","text":"<p>The repository is preconfigured with a <code>./docs</code> directory and renders all markdown files to generate a <code>github-pages</code> site.</p> <p><code>mkdocs-material</code> is customizable via the <code>mkdocs.yml</code> configuration file available in the repository root directory. The configuration present is not exhaustive and can be further customized.</p>"},{"location":"continuous-integration/mkdocs-material/#ci-setup","title":"CI setup","text":""},{"location":"continuous-integration/mkdocs-material/#github-pages","title":"Github pages","text":"<p>A gen-docs workflow is configured to automatically run on the <code>main</code> branch however it requires github-pages to be enabled in the repository settings.</p> <p>See the screenshot below:</p> <p></p> <p>The documentation contained within the <code>./docs</code> directory will be automatically published and accessible via <code>&lt;org&gt;.github.io/&lt;repository&gt;.</code></p>"},{"location":"continuous-integration/mkdocs-material/#site-name","title":"Site name","text":"<p>Update <code>site_name</code> field in <code>./mkdocs.yml</code> file to set the main title for the project documentation.</p>"},{"location":"continuous-integration/mkdocs-material/#local-setup","title":"Local setup","text":"<pre><code>pip install mkdocs-material\n</code></pre> <p>For more installtion options see here.</p> <p>Run a local server to preview docs:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"continuous-integration/pre-commit/","title":"pre-commit","text":""},{"location":"continuous-integration/pre-commit/#what","title":"What","text":"<p>pre-commit is a wrapper for git hook scripts that are useful for identifying simple issues before submission to code review. Git hooks are run on every commit to automatically point out issues in code such as missing semicolons, trailing whitespace, and debug statements and integrate with a variety of third-party tooling.</p>"},{"location":"continuous-integration/pre-commit/#why","title":"Why","text":"<p>Eliminates the effort of initializing and managing git hooks locally. <code>pre-commit</code> also integrates with a large range of (hooks)[https://pre-commit.com/hooks.html] enabling a consistent developer experience.</p>"},{"location":"continuous-integration/pre-commit/#how","title":"How","text":"<p>A <code>.pre-commit-config.yaml</code> config file is configured with common and useful hoooks. This is available at the root of your repository. Each time you make a commit the pre-commit hooks run.  If a hook supports applying auto-fixes (e.g: hook <code>trailing-whitespace</code> support fixing trailing whitespaces), it will proceed to fix it. Any detected failures will abort the commit.</p> <p>Tip</p> <p>See supported hooks here.</p>"},{"location":"continuous-integration/pre-commit/#ci-setup","title":"CI setup","text":"<p>Summary</p> <p>No configuration required.</p> <p>All hooks in <code>.pre-commit-config.yaml</code> will be executed via the pre-commit Github workflow in <code>.github/workflows/pre-commit.yml</code>.</p>"},{"location":"continuous-integration/pre-commit/#local-setup","title":"Local setup","text":"<pre><code>pip install -u pre-commit\n</code></pre> <p>For more installtion options see here.</p> <p>Install the hooks configured in <code>.pre-commit-config.yaml</code>:</p> <pre><code>pre-commit install\n</code></pre> <p>Running against all files instead of only stages files:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"continuous-integration/pre-commit/#faq","title":"FAQ","text":"<ol> <li> <p>Do I have to run <code>pre-commit install</code> everytime I clone a repository?</p> <p>Yes. However, you can automatically enable <code>pre-commit</code> to run when you clone a repository via this link.</p> </li> </ol>"},{"location":"continuous-integration/semantic-release/","title":"semantic-release","text":""},{"location":"continuous-integration/semantic-release/#what","title":"What","text":"<p>semantic-release automates the whole package release workflow including determining the next version number, generating the release notes, and publishing the package.</p> <p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, <code>semantic-release</code> automatically determines the next semantic version number, generates a changelog and publishes the release.</p>"},{"location":"continuous-integration/semantic-release/#why","title":"Why","text":"<p>Follow a well-established commit message convention that encourages your team to have structured commits and provides the controls via commits to automatically version your codebase &amp; publish a release.</p>"},{"location":"continuous-integration/semantic-release/#how","title":"How","text":""},{"location":"continuous-integration/semantic-release/#commit-message-convention","title":"Commit message convention","text":"<p>The formalized convention is as follows for commit messages:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;short summary&gt;\n  \u2502       \u2502             \u2502\n  \u2502       \u2502             \u2514\u2500\u2af8 Summary in present tense. Not capitalized. No period at the end.\n  \u2502       \u2502\n  \u2502       \u2514\u2500\u2af8 Commit Scope: A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis\n  \u2502\n  \u2514\u2500\u2af8 Commit Type: build|ci|docs|feat|fix|perf|refactor|test\n</code></pre>"},{"location":"continuous-integration/semantic-release/#example","title":"Example","text":"Commit message Release type <code>fix(pencil): stop graphite breaking when too much pressure applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code><code>BREAKING CHANGE: The graphiteWidth option has been removed.</code><code>The default graphite width of 10mm is always used for performance reasons.</code> Breaking Release  (Note that the <code>BREAKING CHANGE:</code> token must be in the footer of the commit) <p>For a base version of <code>0.1.0</code>, the following will apply:</p> Type Release type example Notes <code>fix</code> increments to   <code>0.1.1</code> <code>feat</code> increments to   <code>0.1.0</code> Resets any existing patch fixes e.g:   <code>0.1.3</code> will be <code>0.2.0</code> <code>BREAKING CHANGE</code> Increments to <code>1.0.0</code> Can be added to any type All others No version increment"},{"location":"continuous-integration/semantic-release/#ci-setup","title":"CI setup","text":"<p>Warning</p> <p>This section covers important implications of setting up a base tag/release version (or lack of) in your repo before using <code>semantic-release</code>.</p>"},{"location":"continuous-integration/semantic-release/#base-release-version","title":"Base release version","text":"<p>A semantic-release workflow is configured to run on the <code>main</code> branch and technically no further setup is required. However, the semantic-release initial version is set at <code>v1.0.0</code> (with pre-release options) instead of the generally accepted version <code>v0.1.0</code>. This may not be desirable for your project so a workaround is described below.</p> <p>Info</p> <p>As per the semantic versioning spec, the initial development release should be <code>v0.1.0</code>. Optionally you can set it to <code>v0.0.0</code> if there is only an initial commit in the repo.</p> <p>In the Github repo page:</p> <ol> <li> <p>Click on the Create a new release link on the right-hand panel</p> </li> <li> <p>Click on Choose a tag, type in your base version (e.g: <code>v0.1.0</code>) and hit enter</p> </li> <li> <p>Enter desired release title e.g: Pre-release</p> </li> <li> <p>Tick This is a pre-release checkbox</p> </li> <li> <p>Click the Publish button</p> </li> </ol> <p>If you don't want to create a release and the steps above are one too many, you can create a tag via the command line:</p> <pre><code># Within the `main` branch in your git repo\ngit tag -a v0.1.0 -m \"Pre-release\"\ngit push origin v0.1.0\n</code></pre>"},{"location":"continuous-integration/semantic-release/#local-setup","title":"Local setup","text":""},{"location":"continuous-integration/semantic-release/#commitizen","title":"Commitizen","text":"<p>Use commitzen to ease following the commit message convention described above.</p> <pre><code>pip install -U commitizen\n</code></pre> <p>For more installtion options see here.</p> <p>Info</p> <p>Stage some files in your repo and type <code>cz commit</code> and you're ready to go!</p> <p>Tip</p> <p>Decide on the commit convention scope in advance. This will keep it consistent and provide a coherent semantic mapping.</p>"},{"location":"continuous-integration/semantic-release/#faq","title":"FAQ","text":"<ol> <li> <p>I have many <code>feat</code> type commits to be added to <code>main</code> but I don't want to trigger a release</p> <p>For a Continous Deployment methodology, it is not uncommon to release small features frequently in isolation. This will undoubtedly increment your minor version but it is acceptable as it reflects the rapid changes in your project.</p> <p>Alternatively, if you wish to batch features to trigger a release here are some options:</p> <ul> <li> <p>Release branch (recommended)</p> <p>Create a release branch and merge multiple <code>feat</code> type commits to it. When the release branch is ready and merged to <code>main</code>, it will condense the numerous <code>feat</code> type commits to generate a singular increment in the release version/tag.</p> </li> <li> <p>Non-standard commit type</p> <p>Use a custom commit type such as:</p> <pre><code># Feature no release (featnr) denotes a feature but is not release ready\nfeatnr(pencil): add 'graphiteWidth' option\n</code></pre> </li> </ul> </li> </ol>"},{"location":"continuous-integration/sonarqube/","title":"Sonarqube","text":""},{"location":"continuous-integration/sonarqube/#what","title":"What","text":""},{"location":"continuous-integration/sonarqube/#why","title":"Why","text":""},{"location":"continuous-integration/sonarqube/#how","title":"How","text":""},{"location":"continuous-integration/sonarqube/#ci-setup","title":"CI setup","text":""},{"location":"continuous-integration/sonarqube/#local-setup","title":"Local setup","text":"<p>N/A.</p>"}]}